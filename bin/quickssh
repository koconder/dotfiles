#!/bin/bash

# Quick SSH
# Used to quickly connect to SSH services
# Supporting 1password CLI for SSH Keys and root login passwords

# For Mosh:
# Ensure that you have Mosh installed on both your local machine
# and the remote host to use this feature. You can install Mosh
# using the package manager for your system:
#     For Ubuntu/Debian: sudo apt-get install mosh
#     For CentOS/RHEL: sudo yum install mosh
#     For Fedora: sudo dnf install mosh
#     For macOS: brew install mosh
#     For Arch Linux: sudo pacman -S mosh
# Also, make sure the necessary UDP ports (usually 60000-61000)
# are open on the remote host's firewall.

echo -e "\033[0;33m"
cat << "EOF"
              _      _            _     
   __ _ _   _(_) ___| | _____ ___| |__  
  / _` | | | | |/ __| |/ / __/ __| '_ \ 
 | (_| | |_| | | (__|   <\__ \__ \ | | |
  \__, |\__,_|_|\___|_|\_\___/___/_| |_|
     |_|                                

EOF

echo "  quickssh the SSH swiss army knife."
echo -e "\033[0m"
echo " "

# Load hosts from a separate file
if [ -e "$EXTRASPATH/quickssh_hosts.sh" ]; then
  source "$EXTRASPATH/quickssh_hosts.sh"
else
  echo "Error: quickssh_hosts.sh not found"
  echo "We need a file with host configurations"
  exit 1
fi

# Function to get the password from 1Password
function get_password() {
    local alias=$1
    # Replace 'op_account' with your 1Password account name
    # Replace 'item_name_prefix' with the prefix of the item names stored in 1Password
    op item get "ssh_$alias" --account op_account --fields password | tr -d '\n'
}

# Function to connect to a host using its alias
function quicksshconnect() {
    local alias=$1
    local host_info_var="quickssh_hosts_${alias}"
    local host_info=${!host_info_var}

    if [[ -z $host_info ]]; then
        echo "Host alias not found ($alias)... exiting!"
        return 1
    fi

    local user=$(echo $host_info | cut -d: -f1)
    local hostname=$(echo $host_info | cut -d: -f2)
    local port=$(echo $host_info | cut -d: -f3)
    local password=$(echo $host_info | cut -d: -f4)

    # Set default port if not provided
    if [ -z "$port" ]; then
        local port=22
    fi

    # Need to fetch password from vault
    # If password is == $1password then it will go and get the login information from vault
    # TODO: Support keybase CLI
    if [ "$password" == "\$1password" ]; then
        # Run your command here
        echo "Fetching password from 1password vault"
        local password=$(get_password $alias)
        # Check password
        if [ -z "$password" ]; then
            echo "Issue locating password for item (ssh_$alias) in 1password... exiting!"
            return 1
        fi
    fi

    echo "Connecting to $alias: $user@$hostname (Port: $port)"
    #We should not use sshpass and opt to use ssh and read password via secure clipboard TTY entry
    #https://gist.github.com/justinline/e11ac0f08f267502b9e96362457d03c6
    #sshpass -p "$password" ssh -p $port $user@$hostname

    if [ -n "$password" ]
        then
            echo $password | xclip -selection clipboard
            echo "Password was copied - clipboard will be wiped in 30 seconds"
            # encapsulated with "&" as a background process fucntion
            # So we can clear the clipboard in the background and avoid waiting
            (
              sleep 30
              echo "" | xclip -selection clipboard
              echo "Clipboard reset."
            ) &
    fi

    # Run the connection
    ssh -p $port $user@$hostname
}

# Main script
while getopts "hl:d:" option; do
    case $option in
        h)
            echo "Usage: $0 [-l local_port] [-d destination_port] <host-alias>"
            echo "Available host aliases:"
            for key in "${!hosts[@]}"; do
                echo "  - $key"
            done
            exit 0
            ;;
        l)
            local_port=$OPTARG
            ;;
        d)
            destination_port=$OPTARG
            ;;
        *)
            echo "Invalid option"
            exit 1
            ;;
    esac
done

shift $((OPTIND-1))
host_alias=$1

if [[ $# -ne 1 ]]; then
    echo "Usage: $0 [-l local_port] [-d destination_port] <host-alias>"
    echo "Available quickssh host aliases:"
    for key in "${quickssh_hosts[@]}"; do
        echo "  - $key"
    done
    echo " "
else
    quicksshconnect $1
fi
